" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")


" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

function! SetTips()

  " execute a command and show its output in a new tab
  command! -nargs=* -complete=shellcmd Rtab execute "tabnew | r! <args>"
  " display tips
  command! Tipsmove tabnew ~/.vim/tips_move.txt
  command! Tipscursor tabnew ~/.vim/tips_cursor.txt
  command! Tipsall tabnew ~/.vim/tips_all.txt
endfunction

function! SetLook()
  colorscheme elflord
  set number
  set cursorline
  hi CursorLine term=bold cterm=bold guibg=Grey20
  hi CursorLineNr term=bold cterm=bold guibg=Grey40
  hi LineNr ctermfg=DarkGrey guifg=#2b506e guibg=#000000
  hi Folded ctermfg=Grey ctermbg=DarkGrey guifg=#aaaaaa guibg=#555555
endfunction

" tabulation/indentation
function! SetIndent()
  augroup expandtabFTW
    autocmd!
    set tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab
  augroup END
endfunction

" folding
function SetFolding()
  " Folding
  set foldmethod=syntax foldlevelstart=99
  "  -> dont unlaod/reload while switchingbuffers
  "  -> Which also allows to keep folds status
  set hidden 
endfunction

" NERDTree
function! SetNerdConf()
  noremap <C-e> :NERDTree<cr>
endfunction

function! SetTypescriptConf()
    " remap ts imports
    autocmd FileType typescript nmap <buffer> <C-x><C-i> :TsuImport<CR>
    " display signatures on preview and completion
    let g:tsuquyomi_completion_detail = 1
    autocmd FileType typescript setlocal completeopt+=menu,preview
    autocmd FileType typescript noremap <buffer> <C-t> : <C-u>echo tsuquyomi#hint()<CR>
endfunction

function! SetFzf()
  if !has('win32') && !has('win64') && filereadable(expand("~/.fzf/bin/fzf"))
    set rtp+=~/.fzf
    command! FZFexclude call fzf#run({'source': 'find . \! \( -type d \( -path "*.git*" -o -path "*/node_modules/*" \) -prune \)', 'sink': 'e', 'down':'30%'})
    noremap <C-p> :FZFexclude<cr>
  endif
endfunction

function! AdaptToWin()
  if has('win32') || has('win64')
    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
    set guifont=Consolas:h11
    " Use bash with Rtab custom command
    command! -nargs=* -complete=shellcmd Rtab execute 'tabnew | r!"c:\Program Files\Git\bin\bash.exe" -c ls'
  endif
endfunction


call SetTips()
call SetLook()
call SetIndent()
call SetFolding()
call SetNerdConf()
call SetTypescriptConf()
call SetFzf()
call AdaptToWin()


execute pathogen#infect()
